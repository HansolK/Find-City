{"version":3,"sources":["FindCity.js","GaugeBar.js","CityDetail.js","App.js","serviceWorker.js","index.js"],"names":["FindCity","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","cities","selectedItem","url","_this2","setState","fetch","then","res","json","data","_embedded","_this3","react_default","a","createElement","className","onSubmit","e","preventDefault","length","onSelect","_links","href","matching_full_name","onKeyDown","key","value","onChange","event","target","GetCity","concat","type","map","city","index","onKeydown","onClick","Component","GaugeBar","percentage","score","outOf","style","width","backgroundColor","color","CityDetail","categories","error","previousProps","fetchInfo","undefined","Error","name","full_name","console","log","catch","category","Math","round","score_out_of_10","src_GaugeBar_0","App","src_FindCity_0","src_CityDetail_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa972c32.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./FindCity.css\";\n\nclass FindCity extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      cities: [],\n      selectedItem: 0\n    };\n  }\n\n  GetCity(url) {\n    this.setState({\n      selectedItem: 0\n    })\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          cities: data._embedded[\"city:search-results\"]\n        });\n        return data._embedded[\"city:search-results\"];\n      });\n  }\n\n  render() {\n    \n    return (\n      <div className=\"findCity\">\n        <form\n          className=\"findCity_form\"\n          onSubmit={e => {\n            e.preventDefault();\n            if(this.state.cities.length === 0) {\n              return\n            }\n            this.props.onSelect(this.state.cities[0]._links[\"city:item\"].href)\n              this.setState({\n                cities: [],\n                input: this.state.cities[this.state.selectedItem].matching_full_name\n              });\n          }}\n        >\n          <input\n            onKeyDown={(e) => {\n              if(e.key === \"ArrowDown\" && this.state.selectedItem < this.state.cities.length-1) {\n                this.setState({\n                  selectedItem: this.state.selectedItem + 1\n                })\n              } else if(e.key === \"ArrowUp\" && this.state.selectedItem > 0) {\n                this.setState({\n                  selectedItem: this.state.selectedItem - 1\n                })\n              }\n            }}\n            value={this.state.input}\n            onChange={event => {\n              this.setState({\n                input: event.target.value\n              });\n              this.GetCity(\n                `https://api.teleport.org/api/cities/?search=${event.target.value}`\n              );\n            }}\n            type=\"text\"\n          />\n        </form>\n        {this.state.cities.length > 0 && (\n          <div className=\"list_container\">\n            <ul>\n              {this.state.cities.map((city, index) => {\n                return (\n                  <li \n                  onKeydown={(e) => {\n                    if(e.key === \"enter\") {\n\n                    }\n                  }}\n                  className={index === this.state.selectedItem? \"changeBackground\": \"\"}\n                    onClick={e => {\n                      this.props.onSelect(city._links[\"city:item\"].href)\n                      this.setState({\n                        cities: [],\n                        input: city.matching_full_name\n                      });\n                    }}\n                  >\n                    {city.matching_full_name}\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default FindCity;\n\n","import React, { Component } from 'react';\nimport './GaugeBar.css'\n\nconst GaugeBar=(props)=> {\n  const percentage = props.score / props.outOf * 100\n  return (\n    <div className=\"bar\">\n      <div \n      className=\"innerbar\"\n      style={{\n        width: `${percentage}%`,\n        backgroundColor: props.color\n      }}>\n      </div>\n    </div>\n  )\n}\n\nexport default GaugeBar","import React, {Component} from 'react';\nimport GaugeBar from './GaugeBar'\nimport './CityDetail.css'\n\nclass CityDetail extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      categories: [],\n      error: false\n    }\n  }\n  componentDidUpdate(previousProps) {\n    if(previousProps.url !== this.props.url) {\n      this.fetchInfo(this.props.url)\n    }\n  }\n\n  fetchInfo(url) {\n    this.setState({\n      error: false\n    })\n    fetch(url)\n    .then(res=>res.json())\n    .then(data => {\n      \n      if(data._links[\"city:urban_area\"] === undefined) {\n        throw new Error(\"We cannot find the urban area\")\n      }\n      this.setState({\n        name: data.full_name\n      })\n      console.log(data)\n      return fetch(`${data._links[\"city:urban_area\"].href}scores`)\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({\n        categories: data.categories\n      })\n    })\n    .catch(error => {\n      this.setState({\n        error: true\n      })\n    })\n  }\n  \n  render() {\n    if(this.state.error) {\n      return <p>We cannot find the urban area</p>\n    }\n    return (\n      <div className=\"CityDetail\">\n        {this.state.categories.map((category)=> {\n          return ( \n          <div>\n            <div>\n              <p>{category.name} {Math.round(category.score_out_of_10)}/10</p>\n            </div>\n            <GaugeBar \n            color={category.color}\n            score={category.score_out_of_10} outOf={10}/>\n            \n          </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\n\nexport default CityDetail","import React, { Component } from \"react\";\nimport FindCity from \"./FindCity.js\";\nimport CityDetail from \"./CityDetail.js\"\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"heading\">\n          <h1>City Life Finder</h1>\n          <h3>Have to move to another city? But you are not sure what it is going to be linke? Simply enter the city that you want to find out!</h3>\n        </div>\n        <FindCity\n          onSelect={url => {\n            this.setState({\n              url: url\n            });\n          }}\n        />\n\n        <CityDetail url={this.state.url} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}